// KafkaChatApp.sln (Solution File - Conceptual Content)
// This file would typically be generated by Visual Studio.
// It links the WinFormsClient project to the solution.
//
// Example content:
//
// Microsoft Visual Studio Solution File, Format Version 12.00
// # Visual Studio Version 16
// VisualStudioVersion = 16.0.30907.101
// MinimumVisualStudioVersion = 10.0.40219.1
// Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "WinFormsClient", "WinFormsClient\WinFormsClient.csproj", "{YOUR_PROJECT_GUID}"
// EndProject
// Global
//  GlobalSection(SolutionConfigurationPlatforms) = preSolution
//      Debug|Any CPU = Debug|Any CPU
//      Release|Any CPU = Release|Any CPU
//  EndGlobalSection
//  GlobalSection(ProjectConfigurationPlatforms) = postSolution
//      {YOUR_PROJECT_GUID}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
//      {YOUR_PROJECT_GUID}.Debug|Any CPU.Build.0 = Debug|Any CPU
//      {YOUR_PROJECT_GUID}.Release|Any CPU.ActiveCfg = Release|Any CPU
//      {YOUR_PROJECT_GUID}.Release|Any CPU.Build.0 = Release|Any CPU
//  EndGlobalSection
//  GlobalSection(SolutionProperties) = preSolution
//      HideSolutionNode = FALSE
//  EndGlobalSection
//  GlobalSection(ExtensibilityGlobals) = postSolution
//      SolutionGuid = {YOUR_SOLUTION_GUID}
//  EndGlobalSection
// EndGlobal

// WinFormsClient/WinFormsClient.csproj
// This is the project file for the C# Windows Forms application.
// It specifies the target framework, output type, and references.
// Make sure to restore NuGet packages (Confluent.Kafka) after opening in Visual Studio.
/*
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWindowsForms>true</Useml>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Confluent.Kafka" Version="1.9.0" />
  </ItemGroup>

</Project>
*/

// WinFormsClient/Program.cs
// This is the entry point of the Windows Forms application.
// It sets up the application and runs the main form.
using System;
using System.Windows.Forms;

namespace WinFormsClient
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.SetHighDpiMode(HighDpiMode.SystemAware);
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

// WinFormsClient/Form1.cs
// This file contains the main logic for the chat application's UI.
// It includes Kafka producer and consumer implementation.
using System;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Confluent.Kafka;

namespace WinFormsClient
{
    public partial class Form1 : Form
    {
        private const string KafkaBroker = "localhost:9092"; // Kafka broker address
        private const string KafkaTopic = "chat-message";    // Kafka topic for chat messages

        private IProducer<Null, string> _producer;
        private IConsumer<Null, string> _consumer;
        private CancellationTokenSource _consumerCts;

        public Form1()
        {
            InitializeComponent();
            InitializeKafkaProducer();
            InitializeKafkaConsumer();
            this.FormClosing += Form1_FormClosing; // Register for form closing event
        }

        /// <summary>
        /// Initializes the Kafka producer.
        /// </summary>
        private void InitializeKafkaProducer()
        {
            var config = new ProducerConfig { BootstrapServers = KafkaBroker };
            _producer = new ProducerBuilder<Null, string>(config).Build();
            AppendMessage("Producer initialized.", true);
        }

        /// <summary>
        /// Initializes the Kafka consumer and starts listening for messages in a separate thread.
        /// </summary>
        private void InitializeKafkaConsumer()
        {
            var config = new ConsumerConfig
            {
                BootstrapServers = KafkaBroker,
                GroupId = "chat-app-group", // Consumer group ID
                AutoOffsetReset = AutoOffsetReset.Earliest, // Start consuming from the beginning if no offset is committed
                EnableAutoCommit = true, // Automatically commit offsets
                EnablePartitionEof = true // Enable End-of-File events for partitions
            };

            _consumer = new ConsumerBuilder<Null, string>(config).Build();
            _consumer.Subscribe(KafkaTopic); // Subscribe to the chat topic

            _consumerCts = new CancellationTokenSource(); // Token for cancelling the consumer task

            // Start consumer in a separate task to avoid blocking the UI thread
            Task.Run(() => ConsumeMessages(_consumerCts.Token));
            AppendMessage("Consumer initialized and listening.", true);
        }

        /// <summary>
        /// Consumes messages from the Kafka topic asynchronously.
        /// </summary>
        /// <param name="cancellationToken">Token to cancel the consumption process.</param>
        private void ConsumeMessages(CancellationToken cancellationToken)
        {
            try
            {
                while (!cancellationToken.IsCancellationRequested)
                {
                    try
                    {
                        // Consume a message with a timeout
                        var consumeResult = _consumer.Consume(TimeSpan.FromMilliseconds(100));

                        if (consumeResult != null)
                        {
                            // If a message is received, append it to the chat display
                            AppendMessage($"Received: {consumeResult.Message.Value}");
                        }
                    }
                    catch (ConsumeException ex)
                    {
                        // Handle consumer errors
                        if (ex.Error.IsFatal)
                        {
                            AppendMessage($"Consumer Error (Fatal): {ex.Error.Reason}", true);
                            break; // Exit loop on fatal error
                        }
                        else
                        {
                            AppendMessage($"Consumer Error: {ex.Error.Reason}", true);
                        }
                    }
                    catch (OperationCanceledException)
                    {
                        // Consumer was cancelled, exit loop
                        break;
                    }
                    catch (Exception ex)
                    {
                        AppendMessage($"An unexpected error occurred in consumer: {ex.Message}", true);
                        break;
                    }
                }
            }
            finally
            {
                // Ensure consumer is closed when done or cancelled
                _consumer.Close();
                _consumer.Dispose();
                AppendMessage("Consumer stopped and disposed.", true);
            }
        }

        /// <summary>
        /// Handles the "Send" button click event.
        /// Sends the message from the input textbox to Kafka.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        private async void btnSend_Click(object sender, EventArgs e)
        {
            string message = txtMessageInput.Text.Trim();
            if (string.IsNullOrEmpty(message))
            {
                MessageBox.Show("Please enter a message.", "Empty Message", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            try
            {
                // Produce the message to Kafka
                var deliveryResult = await _producer.ProduceAsync(KafkaTopic, new Message<Null, string> { Value = message });
                AppendMessage($"Sent: {message}");
                txtMessageInput.Clear(); // Clear input after sending
            }
            catch (ProduceException<Null, string> ex)
            {
                AppendMessage($"Delivery failed: {ex.Error.Reason}", true);
            }
            catch (Exception ex)
            {
                AppendMessage($"An unexpected error occurred while sending: {ex.Message}", true);
            }
        }

        /// <summary>
        /// Handles the "Cancel" button click event.
        /// Clears the message input textbox.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        private void btnCancel_Click(object sender, EventArgs e)
        {
            txtMessageInput.Clear();
        }

        /// <summary>
        /// Appends a message to the rich text box display.
        /// This method is thread-safe as it uses Invoke for UI updates.
        /// </summary>
        /// <param name="message">The message to append.</param>
        /// <param name="isError">True if the message is an error/status message, false for chat messages.</param>
        private void AppendMessage(string message, bool isError = false)
        {
            if (this.InvokeRequired)
            {
                // If called from a different thread, invoke on the UI thread
                this.Invoke(new Action(() => AppendMessage(message, isError)));
            }
            else
            {
                // Append message with a timestamp
                txtChatDisplay.AppendText($"[{DateTime.Now:HH:mm:ss}] {(isError ? "[STATUS] " : "")}{message}{Environment.NewLine}");
                // Scroll to the end
                txtChatDisplay.SelectionStart = txtChatDisplay.Text.Length;
                txtChatDisplay.ScrollToCaret();
            }
        }

        /// <summary>
        /// Handles the form closing event.
        /// Ensures Kafka producer and consumer are properly disposed.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Cancel the consumer task
            _consumerCts?.Cancel();
            _consumerCts?.Dispose();

            // Flush and dispose producer
            if (_producer != null)
            {
                AppendMessage("Flushing producer messages...", true);
                _producer.Flush(TimeSpan.FromSeconds(10)); // Wait up to 10 seconds for messages to be delivered
                _producer.Dispose();
                AppendMessage("Producer disposed.", true);
            }
        }
    }
}

// WinFormsClient/Form1.Designer.cs
// This file is automatically generated by the Visual Studio Forms Designer.
// It defines the layout and controls of the Form1.
namespace WinFormsClient
{
    partial class Form1
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.txtChatDisplay = new System.Windows.Forms.RichTextBox();
            this.txtMessageInput = new System.Windows.Forms.TextBox();
            this.btnSend = new System.Windows.Forms.Button();
            this.btnCancel = new System.Windows.Forms.Button();
            this.lblEnterMessage = new System.Windows.Forms.Label();
            this.SuspendLayout();
            //
            // txtChatDisplay
            //
            this.txtChatDisplay.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.txtChatDisplay.Location = new System.Drawing.Point(12, 12);
            this.txtChatDisplay.Name = "txtChatDisplay";
            this.txtChatDisplay.ReadOnly = true;
            this.txtChatDisplay.Size = new System.Drawing.Size(776, 350);
            this.txtChatDisplay.TabIndex = 0;
            this.txtChatDisplay.Text = "";
            //
            // txtMessageInput
            //
            this.txtMessageInput.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.txtMessageInput.Location = new System.Drawing.Point(12, 395);
            this.txtMessageInput.Multiline = true;
            this.txtMessageInput.Name = "txtMessageInput";
            this.txtMessageInput.Size = new System.Drawing.Size(600, 43);
            this.txtMessageInput.TabIndex = 1;
            //
            // btnSend
            //
            this.btnSend.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.btnSend.Location = new System.Drawing.Point(620, 395);
            this.btnSend.Name = "btnSend";
            this.btnSend.Size = new System.Drawing.Size(80, 43);
            this.btnSend.TabIndex = 2;
            this.btnSend.Text = "Send";
            this.btnSend.UseVisualStyleBackColor = true;
            this.btnSend.Click += new System.EventHandler(this.btnSend_Click);
            //
            // btnCancel
            //
            this.btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.btnCancel.Location = new System.Drawing.Point(708, 395);
            this.btnCancel.Name = "btnCancel";
            this.btnCancel.Size = new System.Drawing.Size(80, 43);
            this.btnCancel.TabIndex = 3;
            this.btnCancel.Text = "Cancel";
            this.btnCancel.UseVisualStyleBackColor = true;
            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
            //
            // lblEnterMessage
            //
            this.lblEnterMessage.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.lblEnterMessage.AutoSize = true;
            this.lblEnterMessage.Location = new System.Drawing.Point(12, 375);
            this.lblEnterMessage.Name = "lblEnterMessage";
            this.lblEnterMessage.Size = new System.Drawing.Size(124, 15);
            this.lblEnterMessage.TabIndex = 4;
            this.lblEnterMessage.Text = "Please Enter your Message Here:";
            //
            // Form1
            //
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Controls.Add(this.lblEnterMessage);
            this.Controls.Add(this.btnCancel);
            this.Controls.Add(this.btnSend);
            this.Controls.Add(this.txtMessageInput);
            this.Controls.Add(this.txtChatDisplay);
            this.Name = "Form1";
            this.Text = "Kafka Chat Application";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.RichTextBox txtChatDisplay;
        private System.Windows.Forms.TextBox txtMessageInput;
        private System.Windows.Forms.Button btnSend;
        private System.Windows.Forms.Button btnCancel;
        private System.Windows.Forms.Label lblEnterMessage;
    }
}

// WinFormsClient/App.config (or appsettings.json for .NET Core)
// This file is for application configuration. For .NET Framework, it's App.config.
// For .NET Core, appsettings.json is typically used.
// For simplicity, Kafka broker details are hardcoded in Form1.cs,
// but for a real application, they should be configured here.
/*
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup>
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
    <appSettings>
        <!-- Example for .NET Framework. For .NET Core, use appsettings.json -->
        <add key="KafkaBroker" value="localhost:9092" />
        <add key="KafkaTopic" value="chat-message" />
    </appSettings>
</configuration>
*/
